/**
 *  Local configuration overrides (omitted from Git)
 *	RENAME THIS FILE to locals.js or local.js for it to take effect
 *
 */

module.exports = {

  // Event management details
  events: {
     
  },
  
  /***************************************************************************
   * Your SSL certificate and key, if you want to be able to serve HTTP      *
   * responses over https:// and/or use websockets over the wss:// protocol  *
   * (recommended for HTTP, strongly encouraged for WebSockets)              *
   *                                                                         *
   * In this example, we'll assume you created a folder in your project,     *
   * `config/ssl` and dumped your certificate/key files there:               *
   ***************************************************************************/

  /***************************************************************************
   * Your SSL certificate and key, if you want to be able to serve HTTP      *
   * responses over https:// and/or use websockets over the wss:// protocol  *
   * (recommended for HTTP, strongly encouraged for WebSockets)              *
   *                                                                         *
   * In this example, we'll assume you created a folder in your project,     *
   * `config/ssl` and dumped your certificate/key files there:               *
   * NOTE: You may put this in the /env/development.js and /env/production.js*
   * files if you want to have one in SSL and one in non-ssl mode            *
   ***************************************************************************/

  // ssl: {
  //   ca: require('fs').readFileSync(__dirname + '/ssl/my_apps_ssl_gd_bundle.crt'),
  //   key: require('fs').readFileSync(__dirname + '/ssl/my_apps_ssl.key'),
  //   cert: require('fs').readFileSync(__dirname + '/ssl/my_apps_ssl.crt')
  // },
  
  
  // The example below uses a self-signed certificate (.pfx) converted to a key.pem and 
  // cert.pem file using openssl as follows (assumes mytest.pfx)
  // (info source is https://wiki.cac.washington.edu/display/infra/Extracting+Certificate+and+Private+Key+Files+from+a+.pfx+File):
  // "openssl pkcs12 -in mytest.pfx -nocerts -out key.pem -nodes"
  // "openssl pkcs12 -in mytest.pfx -nokeys -out cert.pem"
  // also did this but didn't use the resulting file
  // "openssl rsa -in key.pem -out server.key"
  //ssl: {     
  //   key: require('fs').readFileSync(__dirname + '/ssl/key.pem'),
  //   cert: require('fs').readFileSync(__dirname + '/ssl/cert.pem')
  //},
  
  proxyHost: 'http://squareevents.org:1337/',  
    
  // Email configuration
  email: {
   //service: "Gmail",
   //auth: {
   //  user:  "me@gmail.com",
   //  pass:  "xxxxxxxxxx"
   //},
   /**
	  * Custom transporter passed directly to nodemailer.createTransport (overrides service/auth)
	  */
	transporter:	{
      host: 'localhost',
      port: 25,
    	tls:{rejectUnauthorized: false},
      auth: {
        user: "xxxxx",
        pass: "yyyyy"
      }
	 },
   from: 'Provincial Events <noreply@squareevents.org>', // sender address
   testMode:  false 
  },
  
  log: {
    //level: 'silly'
  },
  
  /***************************************************************************
   * The `port` setting determines which TCP port your app will be           *
   * deployed on.                                                            *
   *                                                                         *
   * Ports are a transport-layer concept designed to allow many different    *
   * networking applications run at the same time on a single computer.      *
   * More about ports:                                                       *
   * http://en.wikipedia.org/wiki/Port_(computer_networking)                 *
   *                                                                         *
   * By default, if it's set, Sails uses the `PORT` environment variable.    *
   * Otherwise it falls back to port 1337.                                   *
   *                                                                         *
   * In env/production.js, you'll probably want to change this setting       *
   * to 80 (http://) or 443 (https://) if you have an SSL certificate        *
   ***************************************************************************/

  // port: process.env.PORT || 1337,

  /***************************************************************************
   * The runtime "environment" of your Sails app is either typically         *
   * 'development' or 'production'.                                          *
   *                                                                         *
   * In development, your Sails app will go out of its way to help you       *
   * (for instance you will receive more descriptive error and               *
   * debugging output)                                                       *
   *                                                                         *
   * In production, Sails configures itself (and its dependencies) to        *
   * optimize performance. You should always put your app in production mode *
   * before you deploy it to a server.  This helps ensure that your Sails    *
   * app remains stable, performant, and scalable.                           *
   *                                                                         *
   * By default, Sails sets its environment using the `NODE_ENV` environment *
   * variable.  If NODE_ENV is not set, Sails will run in the                *
   * 'development' environment.                                              *
   ***************************************************************************/

   // environment: process.env.NODE_ENV || 'development'
  
};